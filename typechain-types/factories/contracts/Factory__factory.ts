/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Factory, FactoryInterface } from "../../contracts/Factory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "salt",
        type: "uint256",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "deploy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBytecode",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d3a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806352c7420d1461004657806394ca2cb514610064578063a5e3875114610094575b600080fd5b61004e6100b0565b60405161005b9190610392565b60405180910390f35b61007e60048036038101906100799190610533565b610164565b60405161008b91906105d0565b60405180910390f35b6100ae60048036038101906100a991906105eb565b610213565b005b60606100c667bec55013b718ccc460c01b6102e9565b6100da67d3ce572e92de032260c01b6102e9565b6100ee67f8ee1f0417fb122760c01b6102e9565b600060405180602001610100906102ec565b6020820181038252601f19601f82011660405250905061012a674c8c596859a4834d60c01b6102e9565b61013e67e6a5ba0adfbb9d4260c01b6102e9565b8060405160200161014f9190610654565b60405160208183030381529060405291505090565b600061017a674c01c29ee22d3e8f60c01b6102e9565b61018e6745cb589cb433edf960c01b6102e9565b6101a267a9df18493f019a4060c01b6102e9565b600060ff60f81b308486805190602001206040516020016101c6949392919061074c565b6040516020818303038152906040528051906020012090506101f26705129c12ac3b998a60c01b6102e9565b61020667a9cee0fba108879f60c01b6102e9565b8060001c91505092915050565b61022767fa1297eb1c71c90460c01b6102e9565b61023b67bcb76f27a512f48860c01b6102e9565b61024f674e041aca99f80f3e60c01b6102e9565b60008160001b604051610261906102ec565b8190604051809103906000f5905080158015610281573d6000803e3d6000fd5b50905061029867def568c903b1aeaa60c01b6102e9565b6102ac677f13eb61cba8267860c01b6102e9565b7fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e181836040516102dd9291906107a9565b60405180910390a15050565b50565b610532806107d383390190565b600081519050919050565b600082825260208201905092915050565b60005b83811015610333578082015181840152602081019050610318565b83811115610342576000848401525b50505050565b6000601f19601f8301169050919050565b6000610364826102f9565b61036e8185610304565b935061037e818560208601610315565b61038781610348565b840191505092915050565b600060208201905081810360008301526103ac8184610359565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61040a82610348565b810181811067ffffffffffffffff82111715610429576104286103d2565b5b80604052505050565b600061043c6103b4565b90506104488282610401565b919050565b600067ffffffffffffffff821115610468576104676103d2565b5b61047182610348565b9050602081019050919050565b82818337600083830152505050565b60006104a061049b8461044d565b610432565b9050828152602081018484840111156104bc576104bb6103cd565b5b6104c784828561047e565b509392505050565b600082601f8301126104e4576104e36103c8565b5b81356104f484826020860161048d565b91505092915050565b6000819050919050565b610510816104fd565b811461051b57600080fd5b50565b60008135905061052d81610507565b92915050565b6000806040838503121561054a576105496103be565b5b600083013567ffffffffffffffff811115610568576105676103c3565b5b610574858286016104cf565b92505060206105858582860161051e565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105ba8261058f565b9050919050565b6105ca816105af565b82525050565b60006020820190506105e560008301846105c1565b92915050565b600060208284031215610601576106006103be565b5b600061060f8482850161051e565b91505092915050565b600081905092915050565b600061062e826102f9565b6106388185610618565b9350610648818560208601610315565b80840191505092915050565b60006106608284610623565b915081905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6106b26106ad8261066b565b610697565b82525050565b60008160601b9050919050565b60006106d0826106b8565b9050919050565b60006106e2826106c5565b9050919050565b6106fa6106f5826105af565b6106d7565b82525050565b6000819050919050565b61071b610716826104fd565b610700565b82525050565b6000819050919050565b6000819050919050565b61074661074182610721565b61072b565b82525050565b600061075882876106a1565b60018201915061076882866106e9565b601482019150610778828561070a565b6020820191506107888284610735565b60208201915081905095945050505050565b6107a3816104fd565b82525050565b60006040820190506107be60008301856105c1565b6107cb602083018461079a565b939250505056fe608060405234801561001057600080fd5b50610512806100206000396000f3fe6080604052600436106100435760003560e01c80630c4f65bd146100cc5780630cbcae70146100f7578063331a6bf514610122578063ecade2f01461014b5761004a565b3661004a57005b61005e67b53db3b96085797060c01b610174565b610072679f290298efe88f4d60c01b610174565b61008667619f8e71b090a02060c01b610174565b6000610090610177565b90506100a66763864f410abebdf260c01b610174565b60405136600082376000803683855af43d6000833e80600081146100c8573d83f35b3d83fd5b3480156100d857600080fd5b506100e1610208565b6040516100ee91906103f6565b60405180910390f35b34801561010357600080fd5b5061010c610177565b60405161011991906103f6565b60405180910390f35b34801561012e57600080fd5b5061014960048036038101906101449190610442565b610299565b005b34801561015757600080fd5b50610172600480360381019061016d9190610442565b610327565b005b50565b600061018d67da5ba0ea8d57701760c01b610174565b6101a167087e47a2da1d367160c01b610174565b6101b567cec667b747ae958560c01b610174565b600060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd60001c6101e791906104a8565b60001b90506102006768b478630a5ba9fc60c01b610174565b805491505090565b600061021e6729c025f408046dd760c01b610174565b61023267ff51703c01a2175560c01b610174565b61024667b4fd576690f9173560c01b610174565b600060017fa7b53796fd2d99cb1f5ae019b54f9e024446c3d12b483f733ccc62ed04eb126b60001c61027891906104a8565b60001b90506102916708b1f57c67a6077e60c01b610174565b805491505090565b6102ad671338c9a178ba70d160c01b610174565b6102c167e837b4b7ad02724060c01b610174565b6102d567a4d76f0edf43e79960c01b610174565b600060017fa7b53796fd2d99cb1f5ae019b54f9e024446c3d12b483f733ccc62ed04eb126b60001c61030791906104a8565b60001b90506103206787c35be65a24051360c01b610174565b8181555050565b61033b6773f0091d775f4fec60c01b610174565b61034f6766c54fc524f8d56760c01b610174565b61036367a7627783517f993460c01b610174565b600060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd60001c61039591906104a8565b60001b90506103ae6743c0b2bc4fc0658760c01b610174565b8181555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103e0826103b5565b9050919050565b6103f0816103d5565b82525050565b600060208201905061040b60008301846103e7565b92915050565b600080fd5b61041f816103d5565b811461042a57600080fd5b50565b60008135905061043c81610416565b92915050565b60006020828403121561045857610457610411565b5b60006104668482850161042d565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104b38261046f565b91506104be8361046f565b9250828210156104d1576104d0610479565b5b82820390509291505056fea2646970667358221220c8ee63cae31b00c4042ceda89646a61ba2d38c4aa1e961780fe1c9e7fd091abe64736f6c634300080b0033a2646970667358221220c6b3b81698102e701dc0aee59f73508389cb3e3d2f9bd2d9a43b55346b7062a964736f6c634300080b0033";

type FactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Factory__factory extends ContractFactory {
  constructor(...args: FactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Factory> {
    return super.deploy(overrides || {}) as Promise<Factory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Factory {
    return super.attach(address) as Factory;
  }
  override connect(signer: Signer): Factory__factory {
    return super.connect(signer) as Factory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryInterface {
    return new utils.Interface(_abi) as FactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Factory {
    return new Contract(address, _abi, signerOrProvider) as Factory;
  }
}
